Laravel 8 React with Docker Script
==========================
----------------------------------------------
# Day 1
----------------------------------------------
ดูรายชื่อ images ใน docker
---
docker images

ดูรายการ container ที่สร้างไว้
---
docker ps  (มันจะแสดงแค่ตัวที่ start อยู่)
docker ps -a (แสดงทั้งหมดทั้่งตัวที่ start และ stop อยู่)

สร้าง container ใหม่
---
docker run ชื่อ image name หรือ image id
เช่น docker run hello-world

สั่ง start และ stop container
----
docker start ชื่อ container id หรือ container name
docker stop ชื่อ container id หรือ container name

สร้าง Dockerfile สำหรับไว้สร้าง Image ของเราเอง
---
FROM nginx:latest
COPY ./html /usr/share/nginx/html

คำสั่ง build image จาก dockerfile มาใช้งาน
---
docker build -t mynginx:1.0 .

คำสั่งในการ Run Image ที่เราสร้างขึ้นมา เป็น Container
---
docker run --name mywebapp -d -p 8800:80 mynginx:1.0

คำสั่งในการตรวจสอบว่า file docker-compose.yml เขียนถูกต้องหรือไม่
---
docker-compose config -q

ทำการสร้าง image และ container ให้เราด้วย docker-compose
---
docker-compose up -d

คำสั่งสำหรับเรียกสำหรับเรียกดูว่ามี service อะไรทำงานอยู่ใน docker-compose
---
docker-compose ps

สามารถสั่งหยุด service ทั้งหมดในไฟล์ compose โดย
---
docker-compose stop

เราสามารถที่จะลบทุกอย่างใน docker-compose ออกได้
---
docker-compose down

----------------------------------------------
# Day 2
----------------------------------------------
Step 1: กำหนดโครงสร้างโปรเจ็กต์ดังนี้
----
Workshop การสร้าง Custom Image Laravel 8
----
1.PHP + Laravel + NodeJS
2.MySQL
3.Nginx
4.Redis
5.MailHog
6.PHPMyAdmin
----
Laravel8DockerStack
   mysql
       |--data
   nginx
       |-- conf
            |-- app.conf
   redis
       |-- data
   src
       |-- ...
       |-- ...
   docker-compose.yaml
   Dockerfile

Step 2:  Clone ตัว Laravel 8 มาใส่ใน src
---
git clone https://github.com/laravel/laravel.git  -b 8.x src

Step 3: กำหนด Image ใน Dockerfile
---
# โหลด Base Image PHP 8.0.3
FROM php:8.0.3-fpm-buster

# ติดตั้ง Exention bcmath และ pdo_mysql
RUN docker-php-ext-install bcmath pdo_mysql

# สั่ง update image และ ติดตั้ง git zip และ unzip pacakage
RUN apt-get update
RUN apt-get install -y git zip unzip

# ติดตั้ง NodeJS
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - 
RUN apt-get install -y nodejs

# Copy file composer:latest ไว้ที่ /usr/bin/composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

EXPOSE 9000

หากต้องการรู้ว่าภายใน php:8.0.3-fpm-buster มี module อะไรอยู่บ้าง
--
docker run php:8.0.3-fpm-buster php -m


Step 4: กำหนดส่วนของ nginx setting
---
server {
    listen 80;
    index index.php index.html;
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}

Step 5: กำหนดส่วนของ docker-compose.yaml
---
version: '3.9'

# Network for Laravel 8
networks:
  web_network:
    name: laravel8
    driver: bridge

services:

  # PHP App Service 
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel8-app
    container_name: laravel8_app
    restart: always
    volumes:
      - ./src:/var/www
    networks:
      - web_network

  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: laravel8_mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=laravel8db
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=1234
    ports:
      - "3308:3306"
    restart: always
    networks:
      - web_network

  # Nginx Web Server Service
  nginx:
    image: nginx:1.19.8-alpine
    container_name: laravel8_nginx
    volumes:
      - ./src:/var/www
      - ./nginx/conf:/etc/nginx/conf.d
    ports:
      - "8100:80"
    restart: always
    networks:
      - web_network

เช็คความเรียบร้อยของ docker-compose
---
docker-compose config -q

Step 6: สั่ง docker-compose up -d
---
docker-compose up -d

ลองเช็คสถานะด้วยคำสั่ง
---
docker-compose ps

Step 7:  เรียกเข้าไปติดตั้ง library ของ laravel ใน service "app"
---
docker-compose exec app composer install

Step 8: เพิมไฟล์ .env โดยคัดลอกโค้ดทั้งหมดจาก .env.example มาใส่
cp ./src/.env.example ./src/.env

Step 9: ทำการ Generate ตัว APP_KEY
--
docker-compose exec app php artisan key:generate

Step 10: Config Database ที่ไฟล์ .env
---
DB_HOST=db
DB_PORT=3306
DB_DATABASE=laravel8db
DB_USERNAME=admin
DB_PASSWORD=1234

Step 11: ทำการ Run Migration (สร้างฐานและตารางให้อัตโมัติ)
---
เบื้องต้นให้ใช้คำสั่ง clear config ของไฟล์ .env
docker-compose exec app php artisan config:clear

คำสั่ง migrate database
---
docker-compose exec app php artisan migrate

Step 12: เพิ่ม Redis (caching) Service ใน docker-compose
---
  # Redis (caching)
  redis:
    image: redis:6.2.1-buster
    container_name: laravel8_redis
    volumes: 
      - ./redis/data:/data
    restart: always
    networks:
      - web_network  

Step 13: ทำการ down ตัว container ทั้งหมดไปก่อนแล้ว ทำการ docker-compose up -d
---
docker-compose down
docker-compose up -d

Step 14: ทำการติดตั้ง depency predis/predis ในโปรเจ็กต์ Laravel
--
docker-compose exec  app composer require predis/predis


Step 15: เพิ่ม mailhog Service ใน docker-compose.yml
---
  # MailHog (local mail testing)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: laravel8_mailhog
    ports:
      - 8025:8025
    restart: always
    tty: true
    networks:
      - web_network

Step 16: เพิ่ม phpMyAdmin Service ใน docker-compose.yml
---
  # phpMyAdmin (MySQL managment)
  phpmyadmin:
    image: phpmyadmin:5.1.0-apache
    depends_on:
      - db
    container_name: laravel8_phpmyadmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: admin
      PMA_PASSWORD: 1234
    ports:
      - 8200:80
    restart: always
    tty: true
    networks:
      - web_network

Step 17: ทำการ down ตัว container ทั้งหมดไปก่อนแล้ว ทำการ docker-compose up -d
---
docker-compose down
docker-compose up -d

docker-compose ps

Step 18: สร้าง Laravel Mail
---
docker-compose exec app php artisan make:mail TestMail

Step 19: เพิ่ม route
---
// Test Mailhog
Route::get('/send-email', function() {
    Mail::to('samit@itgeniussite.dev')->send(new TestMail);
});

Step 20: แก้ไฟล์ .env
---
MAIL_FROM_ADDRESS=samit@itgeniussite.dev

จากนั้นก็ clear cach
---
docker-compose exec app php artisan config:clear